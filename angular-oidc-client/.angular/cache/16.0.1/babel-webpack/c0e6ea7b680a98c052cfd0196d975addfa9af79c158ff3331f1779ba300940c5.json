{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./LocalStorage.service\";\nimport * as i2 from \"angular-auth-oidc-client\";\nimport * as i3 from \"@angular/router\";\nclass AuthorizationGuard {\n  canActivate(route, state) {\n    console.log('Guard');\n    const loginResponse = this.localStorageService.getItem('loginResponse');\n    console.log('loginResponse', loginResponse);\n    if (!loginResponse) return this.router.navigateByUrl('not-authorized');\n    console.log('Guard');\n    if (!loginResponse.isAuthenticated) return this.router.navigateByUrl('not-authorized');\n    return true;\n  }\n  constructor(localStorageService, oidcSecurityService, router) {\n    this.localStorageService = localStorageService;\n    this.oidcSecurityService = oidcSecurityService;\n    this.router = router;\n  }\n}\nAuthorizationGuard.ɵfac = function AuthorizationGuard_Factory(t) {\n  return new (t || AuthorizationGuard)(i0.ɵɵinject(i1.LocalStorageService), i0.ɵɵinject(i2.OidcSecurityService), i0.ɵɵinject(i3.Router));\n};\nAuthorizationGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthorizationGuard,\n  factory: AuthorizationGuard.ɵfac\n});\nexport { AuthorizationGuard };","map":{"version":3,"names":["AuthorizationGuard","canActivate","route","state","console","log","loginResponse","localStorageService","getItem","router","navigateByUrl","isAuthenticated","constructor","oidcSecurityService","i0","ɵɵinject","i1","LocalStorageService","i2","OidcSecurityService","i3","Router","factory","ɵfac"],"sources":["C:\\Users\\MICROSOFT\\source\\repos\\Microtec\\IdentityServer\\angular-oidc-client\\src\\app\\authGuard.directive.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n  CanActivate,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot,\r\n  Router,\r\n} from '@angular/router';\r\nimport { Observable, of } from 'rxjs';\r\nimport { LocalStorageService } from './LocalStorage.service';\r\nimport { LoginResponse, OidcSecurityService } from 'angular-auth-oidc-client';\r\n\r\n@Injectable()\r\nexport class AuthorizationGuard implements CanActivate {\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): Observable<boolean> | Promise<boolean> | boolean {\r\n    console.log('Guard');\r\n    const loginResponse: LoginResponse =\r\n      this.localStorageService.getItem('loginResponse');\r\n\r\n    console.log('loginResponse', loginResponse);\r\n\r\n    if (!loginResponse) return this.router.navigateByUrl('not-authorized');\r\n\r\n    console.log('Guard');\r\n\r\n    if (!loginResponse.isAuthenticated)\r\n      return this.router.navigateByUrl('not-authorized');\r\n    return true;\r\n  }\r\n\r\n  constructor(\r\n    private localStorageService: LocalStorageService,\r\n    public oidcSecurityService: OidcSecurityService,\r\n    private router: Router\r\n  ) {}\r\n}\r\n"],"mappings":";;;;AAWA,MACaA,kBAAkB;EAC7BC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IAE1BC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;IACpB,MAAMC,aAAa,GACjB,IAAI,CAACC,mBAAmB,CAACC,OAAO,CAAC,eAAe,CAAC;IAEnDJ,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEC,aAAa,CAAC;IAE3C,IAAI,CAACA,aAAa,EAAE,OAAO,IAAI,CAACG,MAAM,CAACC,aAAa,CAAC,gBAAgB,CAAC;IAEtEN,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;IAEpB,IAAI,CAACC,aAAa,CAACK,eAAe,EAChC,OAAO,IAAI,CAACF,MAAM,CAACC,aAAa,CAAC,gBAAgB,CAAC;IACpD,OAAO,IAAI;EACb;EAEAE,YACUL,mBAAwC,EACzCM,mBAAwC,EACvCJ,MAAc;IAFd,KAAAF,mBAAmB,GAAnBA,mBAAmB;IACpB,KAAAM,mBAAmB,GAAnBA,mBAAmB;IAClB,KAAAJ,MAAM,GAANA,MAAM;EACb;;AAxBQT,kBAAkB,C;mBAAlBA,kBAAkB,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,mBAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,mBAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,MAAA;AAAA;AAAlBrB,kBAAkB,C;SAAlBA,kBAAkB;EAAAsB,OAAA,EAAlBtB,kBAAkB,CAAAuB;AAAA;SAAlBvB,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}