{"ast":null,"code":"/* eslint-disable @typescript-eslint/strict-boolean-expressions */\nfunction parse(string, encoding, opts) {\n  var _opts$out;\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  // Build the character lookup table:\n  if (!encoding.codes) {\n    encoding.codes = {};\n    for (var i = 0; i < encoding.chars.length; ++i) {\n      encoding.codes[encoding.chars[i]] = i;\n    }\n  } // The string must have a whole number of bytes:\n\n  if (!opts.loose && string.length * encoding.bits & 7) {\n    throw new SyntaxError('Invalid padding');\n  } // Count the padding bytes:\n\n  var end = string.length;\n  while (string[end - 1] === '=') {\n    --end; // If we get a whole number of bytes, there is too much padding:\n\n    if (!opts.loose && !((string.length - end) * encoding.bits & 7)) {\n      throw new SyntaxError('Invalid padding');\n    }\n  } // Allocate the output:\n\n  var out = new ((_opts$out = opts.out) != null ? _opts$out : Uint8Array)(end * encoding.bits / 8 | 0); // Parse the data:\n\n  var bits = 0; // Number of bits currently in the buffer\n\n  var buffer = 0; // Bits waiting to be written out, MSB first\n\n  var written = 0; // Next byte to write\n\n  for (var _i = 0; _i < end; ++_i) {\n    // Read one character from the string:\n    var value = encoding.codes[string[_i]];\n    if (value === undefined) {\n      throw new SyntaxError('Invalid character ' + string[_i]);\n    } // Append the bits to the buffer:\n\n    buffer = buffer << encoding.bits | value;\n    bits += encoding.bits; // Write out some bits if the buffer has a byte's worth:\n\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 0xff & buffer >> bits;\n    }\n  } // Verify that we have received just enough bits:\n\n  if (bits >= encoding.bits || 0xff & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n  return out;\n}\nfunction stringify(data, encoding, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  var _opts = opts,\n    _opts$pad = _opts.pad,\n    pad = _opts$pad === void 0 ? true : _opts$pad;\n  var mask = (1 << encoding.bits) - 1;\n  var out = '';\n  var bits = 0; // Number of bits currently in the buffer\n\n  var buffer = 0; // Bits waiting to be written out, MSB first\n\n  for (var i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = buffer << 8 | 0xff & data[i];\n    bits += 8; // Write out as much as we can:\n\n    while (bits > encoding.bits) {\n      bits -= encoding.bits;\n      out += encoding.chars[mask & buffer >> bits];\n    }\n  } // Partial character:\n\n  if (bits) {\n    out += encoding.chars[mask & buffer << encoding.bits - bits];\n  } // Add padding characters until we hit a byte boundary:\n\n  if (pad) {\n    while (out.length * encoding.bits & 7) {\n      out += '=';\n    }\n  }\n  return out;\n}\n\n/* eslint-disable @typescript-eslint/strict-boolean-expressions */\nvar base16Encoding = {\n  chars: '0123456789ABCDEF',\n  bits: 4\n};\nvar base32Encoding = {\n  chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bits: 5\n};\nvar base32HexEncoding = {\n  chars: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bits: 5\n};\nvar base64Encoding = {\n  chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bits: 6\n};\nvar base64UrlEncoding = {\n  chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bits: 6\n};\nvar base16 = {\n  parse: function parse$1(string, opts) {\n    return parse(string.toUpperCase(), base16Encoding, opts);\n  },\n  stringify: function stringify$1(data, opts) {\n    return stringify(data, base16Encoding, opts);\n  }\n};\nvar base32 = {\n  parse: function parse$1(string, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    return parse(opts.loose ? string.toUpperCase().replace(/0/g, 'O').replace(/1/g, 'L').replace(/8/g, 'B') : string, base32Encoding, opts);\n  },\n  stringify: function stringify$1(data, opts) {\n    return stringify(data, base32Encoding, opts);\n  }\n};\nvar base32hex = {\n  parse: function parse$1(string, opts) {\n    return parse(string, base32HexEncoding, opts);\n  },\n  stringify: function stringify$1(data, opts) {\n    return stringify(data, base32HexEncoding, opts);\n  }\n};\nvar base64 = {\n  parse: function parse$1(string, opts) {\n    return parse(string, base64Encoding, opts);\n  },\n  stringify: function stringify$1(data, opts) {\n    return stringify(data, base64Encoding, opts);\n  }\n};\nvar base64url = {\n  parse: function parse$1(string, opts) {\n    return parse(string, base64UrlEncoding, opts);\n  },\n  stringify: function stringify$1(data, opts) {\n    return stringify(data, base64UrlEncoding, opts);\n  }\n};\nvar codec = {\n  parse: parse,\n  stringify: stringify\n};\nexport { base16, base32, base32hex, base64, base64url, codec };","map":{"version":3,"names":["parse","string","encoding","opts","_opts$out","codes","i","chars","length","loose","bits","SyntaxError","end","out","Uint8Array","buffer","written","_i","value","undefined","stringify","data","_opts","_opts$pad","pad","mask","base16Encoding","base32Encoding","base32HexEncoding","base64Encoding","base64UrlEncoding","base16","parse$1","toUpperCase","stringify$1","base32","replace","base32hex","base64","base64url","codec"],"sources":["C:/Users/MICROSOFT/source/repos/Microtec/IdentityServer/angular-oidc-client/node_modules/rfc4648/lib/rfc4648.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/strict-boolean-expressions */\nfunction parse(string, encoding, opts) {\n  var _opts$out;\n\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  // Build the character lookup table:\n  if (!encoding.codes) {\n    encoding.codes = {};\n\n    for (var i = 0; i < encoding.chars.length; ++i) {\n      encoding.codes[encoding.chars[i]] = i;\n    }\n  } // The string must have a whole number of bytes:\n\n\n  if (!opts.loose && string.length * encoding.bits & 7) {\n    throw new SyntaxError('Invalid padding');\n  } // Count the padding bytes:\n\n\n  var end = string.length;\n\n  while (string[end - 1] === '=') {\n    --end; // If we get a whole number of bytes, there is too much padding:\n\n    if (!opts.loose && !((string.length - end) * encoding.bits & 7)) {\n      throw new SyntaxError('Invalid padding');\n    }\n  } // Allocate the output:\n\n\n  var out = new ((_opts$out = opts.out) != null ? _opts$out : Uint8Array)(end * encoding.bits / 8 | 0); // Parse the data:\n\n  var bits = 0; // Number of bits currently in the buffer\n\n  var buffer = 0; // Bits waiting to be written out, MSB first\n\n  var written = 0; // Next byte to write\n\n  for (var _i = 0; _i < end; ++_i) {\n    // Read one character from the string:\n    var value = encoding.codes[string[_i]];\n\n    if (value === undefined) {\n      throw new SyntaxError('Invalid character ' + string[_i]);\n    } // Append the bits to the buffer:\n\n\n    buffer = buffer << encoding.bits | value;\n    bits += encoding.bits; // Write out some bits if the buffer has a byte's worth:\n\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 0xff & buffer >> bits;\n    }\n  } // Verify that we have received just enough bits:\n\n\n  if (bits >= encoding.bits || 0xff & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n\n  return out;\n}\nfunction stringify(data, encoding, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  var _opts = opts,\n      _opts$pad = _opts.pad,\n      pad = _opts$pad === void 0 ? true : _opts$pad;\n  var mask = (1 << encoding.bits) - 1;\n  var out = '';\n  var bits = 0; // Number of bits currently in the buffer\n\n  var buffer = 0; // Bits waiting to be written out, MSB first\n\n  for (var i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = buffer << 8 | 0xff & data[i];\n    bits += 8; // Write out as much as we can:\n\n    while (bits > encoding.bits) {\n      bits -= encoding.bits;\n      out += encoding.chars[mask & buffer >> bits];\n    }\n  } // Partial character:\n\n\n  if (bits) {\n    out += encoding.chars[mask & buffer << encoding.bits - bits];\n  } // Add padding characters until we hit a byte boundary:\n\n\n  if (pad) {\n    while (out.length * encoding.bits & 7) {\n      out += '=';\n    }\n  }\n\n  return out;\n}\n\n/* eslint-disable @typescript-eslint/strict-boolean-expressions */\nvar base16Encoding = {\n  chars: '0123456789ABCDEF',\n  bits: 4\n};\nvar base32Encoding = {\n  chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bits: 5\n};\nvar base32HexEncoding = {\n  chars: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bits: 5\n};\nvar base64Encoding = {\n  chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bits: 6\n};\nvar base64UrlEncoding = {\n  chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bits: 6\n};\nvar base16 = {\n  parse: function parse$1(string, opts) {\n    return parse(string.toUpperCase(), base16Encoding, opts);\n  },\n  stringify: function stringify$1(data, opts) {\n    return stringify(data, base16Encoding, opts);\n  }\n};\nvar base32 = {\n  parse: function parse$1(string, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return parse(opts.loose ? string.toUpperCase().replace(/0/g, 'O').replace(/1/g, 'L').replace(/8/g, 'B') : string, base32Encoding, opts);\n  },\n  stringify: function stringify$1(data, opts) {\n    return stringify(data, base32Encoding, opts);\n  }\n};\nvar base32hex = {\n  parse: function parse$1(string, opts) {\n    return parse(string, base32HexEncoding, opts);\n  },\n  stringify: function stringify$1(data, opts) {\n    return stringify(data, base32HexEncoding, opts);\n  }\n};\nvar base64 = {\n  parse: function parse$1(string, opts) {\n    return parse(string, base64Encoding, opts);\n  },\n  stringify: function stringify$1(data, opts) {\n    return stringify(data, base64Encoding, opts);\n  }\n};\nvar base64url = {\n  parse: function parse$1(string, opts) {\n    return parse(string, base64UrlEncoding, opts);\n  },\n  stringify: function stringify$1(data, opts) {\n    return stringify(data, base64UrlEncoding, opts);\n  }\n};\nvar codec = {\n  parse: parse,\n  stringify: stringify\n};\n\nexport { base16, base32, base32hex, base64, base64url, codec };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}